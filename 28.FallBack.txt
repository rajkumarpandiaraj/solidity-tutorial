                            28.FallBack

fallback is a function that does not take any arguments and does not return anything.
FallBack executes when the function called doesn't exist
mostly used to directly send ETH


another for of fallback is receive

if(ETH is sent to contract){
    if(msg.data == empty){
        //fallback executes
        fallback()
    }else{
        if(receive() function exists){
            receive()
        }else{
            fallback()
        }
    }
}


   Which function is called, fallback() or receive()?

           send Ether
               |
         msg.data is empty?
              / \
            yes  no
            /     \
receive() exists?  fallback()
         /   \
        yes   no
        /      \
    receive()   fallback()
    */



contract FallBack{
    event Log(string func,address sender, uint value, bytes data);

//since it is receive ETH, it is payable
    fallback() external payable{
        emit Log("fallback", msg.sender, msg.value, msg.data);
    }

    receive() external payable{
        emit Log("receive", msg.sender, msg.value, msg.data);
    }
}


